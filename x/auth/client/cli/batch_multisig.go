package cli

import (
	"fmt"

	"github.com/cosmos/cosmos-sdk/client/context"
	crkeys "github.com/cosmos/cosmos-sdk/crypto/keys"
	"github.com/cosmos/cosmos-sdk/x/auth/client/utils"
	"github.com/cosmos/cosmos-sdk/x/auth/types"
	"github.com/pkg/errors"
	"github.com/spf13/cobra"

	"github.com/cosmos/cosmos-sdk/client"
	"github.com/cosmos/cosmos-sdk/client/flags"
	"github.com/cosmos/cosmos-sdk/codec"
)

func GetBatchMultisigCommand(codec *codec.Codec) *cobra.Command {
	cmd := &cobra.Command{
		Use:    "multisign-batch [file] [name] [[signature-file]...]",
		Short:  "Assemble multisig transactions",
		Long:   `Assemble a batch of multisig transactions generated by batch sign command.`,
		PreRun: preSignCmd,
		RunE:   makeBatchMultisigCmd(codec),
		Args:   cobra.MinimumNArgs(3),
	}

	cmd.Flags().String(client.FlagOutputDocument, "",
		"write the result to the given file instead of the default location")

	cmd.Flags().String(
		FlagMultisig, "",
		"Address of the multisig account on behalf of which the transaction shall be signed",
	)

	return flags.PostCommands(cmd)[0]
}

func makeBatchMultisigCmd(cdc *codec.Codec) func(cmd *cobra.Command, args []string) error {
	return func(cmd *cobra.Command, args []string) error {
		_ = context.NewCLIContext().WithCodec(cdc)
		txBldr := types.NewTxBuilderFromCLI()

		_, err := setOutput()
		if err != nil {
			return errors.Wrap(err, "error with output")
		}

		txs, err := utils.ReadStdTxsFromFile(cdc, args[0])
		if err != nil {
			return errors.Wrap(err, "error extracting txs from file")
		}

		multisigInfo, err := txBldr.Keybase().Get(args[1])
		if err != nil {
			return errors.Wrap(err, "error getting keybase multisig account")
		}
		if multisigInfo.GetType() != crkeys.TypeMulti {
			return fmt.Errorf("%q must be of type %s: %s", args[1], crkeys.TypeMulti, multisigInfo.GetType())
		}

		for i := 2; i < len(args); i++ {
			fmt.Printf("%s\n", args[i])
		}

		fmt.Printf("%v", txs)

		return nil
	}
}
